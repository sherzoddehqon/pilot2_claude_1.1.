from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                             QLabel, QTextEdit, QFileDialog, QTreeWidget, QTreeWidgetItem,
                             QMessageBox, QHeaderView, QSplitter)
from PySide6.QtCore import Qt
import networkx as nx
import re

# ui/tabs/network_tab.py

class NetworkTab(QWidget):
    def __init__(self):
        super().__init__()
        self.network_data = None
        self.components = {
            'DP': 'Distribution Point',
            'MC': 'Canal',
            'ZT': 'Gate',
            'SW': 'Smart Water',
            'F': 'Field'
        }
        self.G = nx.DiGraph()
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(5)
        
        # Top buttons row
        buttons_layout = QHBoxLayout()
        
        # Upload controls
        self.upload_btn = QPushButton("Upload Mermaid File")
        self.upload_btn.clicked.connect(self.upload_file)
        self.file_label = QLabel("No file selected")
        
        # Analysis button
        self.analyze_components_btn = QPushButton("1. Analyze Components")
        self.analyze_components_btn.clicked.connect(self.analyze_components)
        self.analyze_components_btn.setEnabled(False)
        
        # Add buttons to top row
        buttons_layout.addWidget(self.upload_btn)
        buttons_layout.addWidget(self.file_label)
        buttons_layout.addWidget(self.analyze_components_btn)
        buttons_layout.addStretch()
        
        # Add buttons row to main layout
        layout.addLayout(buttons_layout)
        
        # Middle section with content preview and results tree side by side
        middle_splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # File content preview
        self.content_preview = QTextEdit()
        self.content_preview.setReadOnly(True)
        self.content_preview.setPlaceholderText("File content will appear here")
        middle_splitter.addWidget(self.content_preview)
        
        # Results tree
        self.results_tree = QTreeWidget()
        self.results_tree.setHeaderLabels(["Component Type", "ID", "Details"])
        self.results_tree.header().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        middle_splitter.addWidget(self.results_tree)
        
        # Add middle section to vertical splitter
        main_splitter = QSplitter(Qt.Orientation.Vertical)
        main_splitter.addWidget(middle_splitter)
        
        # Bottom section
        bottom_widget = QWidget()
        bottom_layout = QVBoxLayout(bottom_widget)
        
        # Path analysis button
        self.analyze_paths_btn = QPushButton("2. Analyze Paths")
        self.analyze_paths_btn.clicked.connect(self.analyze_paths)
        self.analyze_paths_btn.setEnabled(False)
        bottom_layout.addWidget(self.analyze_paths_btn)
        
        # Paths display
        self.paths_display = QTextEdit()
        self.paths_display.setReadOnly(True)
        self.paths_display.setPlaceholderText("Paths will appear here")
        bottom_layout.addWidget(self.paths_display)
        
        main_splitter.addWidget(bottom_widget)
        
        # Add the main splitter to the layout
        layout.addWidget(main_splitter)
        
        self.setLayout(layout)

    def upload_file(self):
        file_name, _ = QFileDialog.getOpenFileName(
            self,
            "Select Mermaid File",
            "",
            "Mermaid Files (*.mmd *.txt);;All Files (*)"
        )
        
        if file_name:
            try:
                with open(file_name, 'r') as file:
                    content = file.read()
                    self.network_data = content
                    self.file_label.setText(file_name.split('/')[-1])
                    self.content_preview.setText(content)
                    self.analyze_components_btn.setEnabled(True)
                    self.G.clear()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Error reading file: {str(e)}")

    def parse_node_info(self, node_text):
        """Parse node text to extract ID and label."""
        # Match pattern: ID["Label"] or just ID
        # Handle both quoted and unquoted labels
        match = re.match(r'([A-Za-z][A-Za-z0-9_]*(?:[-.][A-Za-z0-9_]+)*)\s*(?:\["([^"]+)"\]|\[([^]]+)\])?', node_text.strip())
        if match:
            node_id = match.group(1)  # The ID part
            # Take either the quoted or unquoted label
            node_label = match.group(2) if match.group(2) else (match.group(3) if match.group(3) else "")
            return node_id, node_label
        return node_text.strip(), ""

    def split_arrow_connection(self, line):
        """Split a line by arrow connection, handling different arrow formats."""
        # Match different arrow patterns with optional spaces
        arrow_pattern = r'\s*-+>\s*'
        parts = re.split(arrow_pattern, line.strip())
        return [p.strip() for p in parts if p.strip()]

    def analyze_components(self):
        if not self.network_data:
            return
        
        # Clear previous results
        self.results_tree.clear()
        self.G.clear()
        
        components = {}
        node_labels = {}
        edges = []
        
        lines = self.network_data.split('\n')
        
        # First pass - collect all nodes and their labels
        for line in lines:
            line = line.strip()
            
            # Skip empty lines and comments
            if not line or line.startswith('%'):
                continue
                
            # Process connection lines (e.g., DP1--->F1 or DP1 ---> F1)
            if '-->' in line or '--->' in line:
                parts = self.split_arrow_connection(line)
                if len(parts) == 2:
                    source_text = parts[0]
                    target_text = parts[1]
                    
                    # Process source
                    source_id, source_label = self.parse_node_info(source_text)
                    if source_label:
                        node_labels[source_id] = source_label
                        
                    # Process targets (handle multiple targets separated by &)
                    targets = target_text.split('&')
                    for target in targets:
                        target_id, target_label = self.parse_node_info(target.strip())
                        if target_label:
                            node_labels[target_id] = target_label
                        edges.append((source_id, target_id))
                        
                        # Add both source and target
                        for node_id in [source_id, target_id]:
                            self.add_component(node_id, components)
            
            # Process node definitions with labels (e.g., F1_1["Field 1"])
            elif '"' in line or '[' in line:
                node_id, node_label = self.parse_node_info(line)
                if node_id:
                    if node_label:
                        node_labels[node_id] = node_label
                    self.add_component(node_id, components)
            
            # Process style definitions (e.g., F1_1:::field)
            elif ':::field' in line:
                parts = line.split(':::')
                if len(parts) > 1:
                    node_id = parts[0].strip()
                    self.add_component(node_id, components)
        
        # Add edges to the graph
        for source, target in edges:
            self.G.add_edge(source, target)
        
        # Create tree items
        for comp_type, comp_set in components.items():
            parent = QTreeWidgetItem(self.results_tree)
            parent.setText(0, self.components[comp_type])
            parent.setText(1, f"Total: {len(comp_set)}")
            parent.setExpanded(True)
            
            for comp_id in sorted(comp_set):
                child = QTreeWidgetItem(parent)
                child.setText(0, self.components[comp_type])
                child.setText(1, comp_id)
                
                # Add label and connectivity information
                details = node_labels.get(comp_id, "")
                if comp_type == 'F':
                    predecessors = list(self.G.predecessors(comp_id))
                    if predecessors:
                        details += f" (Connected to: {', '.join(predecessors)})"
                
                child.setText(2, details)
        
        self.analyze_paths_btn.setEnabled(True)
        
        field_count = len(components.get('F', []))
        total_count = sum(len(comp_set) for comp_set in components.values())
        QMessageBox.information(self, "Success", 
            f"Component analysis completed!\n"
            f"Total components: {total_count}\n"
            f"Fields found: {field_count}")

    def add_component(self, node_id, components):
        """Helper method to add a component to the components dictionary."""
        comp_type = node_id[:2] if len(node_id) >= 2 else node_id[:1]
        if comp_type in self.components:
            if comp_type not in components:
                components[comp_type] = set()
            components[comp_type].add(node_id)
            self.G.add_node(node_id)

    def analyze_paths(self):
        if not self.network_data:
            return
        
        self.paths_display.clear()
        
        # Get all field nodes
        fields = [n for n in self.G.nodes() if n.startswith('F')]
        if not fields:
            self.paths_display.setText("No fields found in the network.")
            return
            
        # Find paths to each field
        path_text = "Paths to Fields:\n\n"
        for field in sorted(fields):
            path_text += f"=== Field {field} ===\n"
            # Find all paths from distribution points to this field
            sources = [n for n in self.G.nodes() if n.startswith('DP')]
            
            field_paths = []
            for source in sources:
                try:
                    paths = list(nx.all_simple_paths(self.G, source, field))
                    field_paths.extend(paths)
                except nx.NetworkXNoPath:
                    continue
            
            if field_paths:
                for i, path in enumerate(field_paths, 1):
                    path_text += f"Path {i}: {' -> '.join(path)}\n"
            else:
                path_text += "No paths found to this field\n"
            path_text += "\n"
            
        self.paths_display.setText(path_text)
        
        QMessageBox.information(self, "Success", f"Path analysis completed for {len(fields)} fields!")